import Roomba, {
  WALL_SENSOR,
  BUTTONS_SENSOR,
  TEMPERATURE_SENSOR,
  VIRTUAL_WALL_SENSOR,
  REMOTE_OPCODE_SENSOR,
  BUMPWHEELDROPS_SENSOR,
  CHARGING_STATE_SENSOR,
  MOTOR_OVERCURRENTS_SENSOR,
  ANGLE_MSB_SENSOR, ANGLE_LSB_SENSOR,
  CHARGE_MSB_SENSOR, CHARGE_LSB_SENSOR,
  CURRENT_MSB_SENSOR, CURRENT_LSB_SENSOR,
  VOLTAGE_MSB_SENSOR, VOLTAGE_LSB_SENSOR,
  CAPACITY_MSB_SENSOR, CAPACITY_LSB_SENSOR,
  DISTANCE_MSB_SENSOR, DISTANCE_LSB_SENSOR,
  CLIFFT_LEFT_SENSOR, CLIFFT_FRONT_LEFT_SENSOR,
  CLIFFT_FRONT_RIGHT_SENSOR, CLIFFT_RIGHT_SENSOR,
  DIRT_DETECTOR_LEFT_SENSOR, DIRT_DETECTOR_RIGHT_SENSOR
} from './Roomba'

const telemetryLabelMap = {
  [WALL_SENSOR]: 'WALL_SENSOR',
  [BUTTONS_SENSOR]: 'BUTTONS_SENSOR',
  [ANGLE_MSB_SENSOR]: 'ANGLE_MSB_SENSOR',
  [ANGLE_LSB_SENSOR]: 'ANGLE_LSB_SENSOR',
  [CHARGE_MSB_SENSOR]: 'CHARGE_MSB_SENSOR',
  [CHARGE_LSB_SENSOR]: 'CHARGE_LSB_SENSOR',
  [VOLTAGE_MSB_SENSOR]: 'VOLTAGE_MSB_SENSOR',
  [VOLTAGE_LSB_SENSOR]: 'VOLTAGE_LSB_SENSOR',
  [CURRENT_MSB_SENSOR]: 'CURRENT_MSB_SENSOR',
  [CURRENT_LSB_SENSOR]: 'CURRENT_LSB_SENSOR',
  [TEMPERATURE_SENSOR]: 'TEMPERATURE_SENSOR',
  [CLIFFT_LEFT_SENSOR]: 'CLIFFT_LEFT_SENSOR',
  [CAPACITY_MSB_SENSOR]: 'CAPACITY_MSB_SENSOR',
  [CAPACITY_LSB_SENSOR]: 'CAPACITY_LSB_SENSOR',
  [CLIFFT_RIGHT_SENSOR]: 'CLIFFT_RIGHT_SENSOR',
  [VIRTUAL_WALL_SENSOR]: 'VIRTUAL_WALL_SENSOR',
  [DISTANCE_MSB_SENSOR]: 'DISTANCE_MSB_SENSOR',
  [DISTANCE_LSB_SENSOR]: 'DISTANCE_LSB_SENSOR',
  [REMOTE_OPCODE_SENSOR]: 'REMOTE_OPCODE_SENSOR',
  [BUMPWHEELDROPS_SENSOR]: 'BUMPWHEELDROPS_SENSOR',
  [CHARGING_STATE_SENSOR]: 'CHARGING_STATE_SENSOR',
  [CLIFFT_FRONT_LEFT_SENSOR]: 'CLIFFT_FRONT_LEFT_SENSOR',
  [CLIFFT_FRONT_RIGHT_SENSOR]: 'CLIFFT_FRONT_RIGHT_SENSOR',
  [MOTOR_OVERCURRENTS_SENSOR]: 'MOTOR_OVERCURRENTS_SENSOR',
  [DIRT_DETECTOR_LEFT_SENSOR]: 'DIRT_DETECTOR_LEFT_SENSOR',
  [DIRT_DETECTOR_RIGHT_SENSOR]: 'DIRT_DETECTOR_RIGHT_SENSOR'
}

const roomba = new Roomba()

const onShutdown = () => {
  console.warn('Shutting down socket.')
  roomba.disconnect().then(() => {
    console.log('Socket closed.')
    process.exit(0)
  })
}

roomba.on('telemetry', telemetry => {
  Object.keys(telemetry).forEach(sensor => {
    console.log(telemetryLabelMap[sensor], ':', telemetry[sensor])
  })
})

roomba.connect().then(() => {
  roomba.startSpammingTelemetry()
})

process.on('SIGINT', onShutdown)
process.on('SIGTERM', onShutdown)
